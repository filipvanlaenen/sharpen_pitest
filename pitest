#!/bin/bash
#
# Runs the mutation coverage goal for PIT

# This method runs plain PIT
function plain_pit() {
  # Run PIT
  mvn clean install
  mvn org.pitest:pitest-maven:mutationCoverage
  # Archive the PIT report
  dirname=${PWD##*/}
  mkdir -p ../${dirname}-pit-reports/
  mv target/pit-reports/* ../${dirname}-pit-reports/
}

# This method runs PIT with a single parameter
function focused_pit() {
  local testclass=$1
  if ! [[ ${testclass} == *Test ]]
  then
    testclass="${testclass}Test"
  fi
  # Comment out all @Test tags in Java files ending with Test and TestBase
  find . -type f -name "*Test.java" -exec sed -i 's/@Test/\/\/ @Test/g' {} +
  find . -type f -name "*TestBase.java" -exec sed -i 's/@Test/\/\/ @Test/g' {} +
  # Comment in all @Test tags for the class whose name is provided.
  find . -type f -name "$testclass.java" -exec sed -i 's/\/\/ @Test/@Test/g' {} +
  # Comment in all @Test tags for the test base class (if any)
  extension=$(find . -type f -name "$testclass.java" -exec grep -o 'extends \w*TestBase' {} +)
  testbaseclass=${extension//extends /}
  find . -type f -name "$testbaseclass.java" -exec sed -i 's/\/\/ @Test/@Test/g' {} +
  # Run PIT
  mvn clean install
  mvn org.pitest:pitest-maven:mutationCoverage
  # Comment in all @Test tags again (also if proceeded by multiple comment prefixes).
  find . -type f -name "*.java" -exec sed -i 's/\(\/\/ \)\+@Test/@Test/g' {} +
  # Archive the PIT report
  dirname=${PWD##*/}
  mkdir -p ../${dirname}-pit-reports/${testclass}
  mv target/pit-reports/* ../${dirname}-pit-reports/${testclass}
}
 
if [[ "$#" -eq 0 ]]
then
  plain_pit
elif [[ "$#" -eq 1 ]] && [[ $1 == "-g" ]]
then
  # Capture lines from git status -s matching Java files.
  changes=$(git status -s | awk '/\.java$/ {print $2}')
  for change in $changes
  do
    filename="$(basename -- $change .java)"
    focused_pit "$filename"
  done
else
  for arg in "$@"
  do
    focused_pit "$arg"
  done
fi
